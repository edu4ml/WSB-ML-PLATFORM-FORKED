name: Platform CI/CD

on:
  push:
    branches:
      - main

# env:
#   DJANGO_SETTINGS_MODULE: 'server.settings'
#   DEBUG: 1
#   DATABASE_PASSWORD: password
#   DATABASE_NAME: elearning
#   DATABASE_HOST: 0.0.0.0
#   DATABASE_USER: postgres

#   GAR_URL: https://wsb-mlproject.ew.r.appspot.com

#   PROJECT_ID: ${{ secrets.GKE_PROJECT }}
#   GAR_LOCATION: us-central1 # TODO: update region of the Artifact Registry
#   GKE_CLUSTER: cluster-1    # TODO: update to cluster name
#   GKE_ZONE: us-central1-c   # TODO: update to cluster zone
#   DEPLOYMENT_NAME: gke-test # TODO: update to deployment name
#   REPOSITORY: samples # TODO: update to Artifact Registry docker repository
#   IMAGE: static-site

jobs:
  # tests:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       type: ['unit-test', 'e2e-test']
  #   services:
  #     postgres: 
  #       image: postgres:latest
  #       env:
  #         POSTGRES_DB: elearning
  #         POSTGRES_USER: postgres
  #         POSTGRES_PASSWORD: password
  #       ports:
  #         - 5432:5432
  #       options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@v2

  #     - name: Set up Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: 3.11

  #     - name: Cache Python dependencies
  #       uses: actions/cache@v2
  #       with:
  #         path: ~/.cache/pip
  #         key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
  #         restore-keys: |
  #           ${{ runner.os }}-pip-

  #     - name: Install dependencies
  #       run: |
  #         make sync-all-deps

  #     - name: Run migrations
  #       run: |
  #         python manage.py migrate

  #     - name: Run tests
  #       if: matrix.type == 'unit-test'
  #       run: pytest .

  #     - name: Set up Node.js
  #       if: matrix.type == 'e2e-test'
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: 14

  #     - name: Cache Node.js dependencies
  #       if: matrix.type == 'e2e-test'
  #       uses: actions/cache@v2
  #       with:
  #         path: ~/.npm
  #         key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: |
  #           ${{ runner.os }}-node-

  #     - name: Install Node.js dependencies
  #       if: matrix.type == 'e2e-test'
  #       run: npm install

  #     - name: Cypress run
  #       if: matrix.type == 'e2e-test'
  #       uses: cypress-io/github-action@v5.5.1
  #       with:
  #         browser: chrome
  #         build: npm run build
  #         start: make run-for-cypress
  #         wait-on: http://0.0.0.0:8000
  #         wait-on-timeout: 10

  deploy:
    name: Deploy to Google Cloud Engine
    environment: production
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 14

    - name: Cache Node.js dependencies
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Node.js dependencies
      run: npm install

    - name: Build static frontend
      run: npm run build 

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.11

    - name: Cache Python dependencies
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        make sync-all-deps

    - name: Collect staticfiles
      run: python3 manage.py collectstatic --no-input

    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
    
    - run: ls && pwd

    - name: Deploy to App Engine
      uses: google-github-actions/deploy-appengine@v1.2.2
      id: deploy
      with:
        version: v1
        deliverables: server/app.yaml
        project_id: wsb-mlproject

        env_vars: |-
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          DEBUG=${{ vars.DEBUG }}
          
          DJANGO_SETTINGS_MODULE=${{ vars.DJANGO_SETTINGS_MODULE }}
          
          DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
          DATABASE_HOST=${{ vars.DATABASE_HOST }}
          DATABASE_NAME=${{ vars.DATABASE_NAME }}
          DATABASE_USER=${{ vars.DATABASE_USER }}
          DATABASE_PORT=${{ vars.DATABASE_PORT }}

    - name: Test
      run: curl "${{ steps.deploy.outputs.url }}"
  
  # notify:
  #   needs: [tests]
  #   runs-on: ubuntu-latest
  #   if: ${{ always() }}
  #   steps:
  #     - name: Slack Notification
  #       uses: rtCamp/action-slack-notify@v2
  #       env:
  #         MSG_MINIMAL: true
  #         SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
  #         SLACK_TITLE: ':robot: CI results for ${{ github.repository }}'
  #         SLACK_COLOR: ${{ needs.tests.result }}
  #         SLACK_LINK_NAMES: true
  #         SLACK_MESSAGE: |
  #           *Tests results:*
  #           - unit-tests : ${{ needs.tests.result }}
  #           - e2e-tests*: ${{ needs.tests.result }}  

  #           *commit*: ${{ github.sha }}
  #           *branch*: ${{ github.ref }}
